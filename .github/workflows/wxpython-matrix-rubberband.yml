name: Rubberband wxpython linux and mac 
on:
  push:
    branches: [ main ]
jobs:
  buildfun:
    # runs-on: ubuntu-18.04
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [macos-latest, ubuntu-18.04, windows-latest]
        os: [macos-latest, ubuntu-18.04, ubuntu-20.04]

    # For pure binary builds
    # ----------------------
    # ubuntu 20.04 only has python 3.8 wheels at the moment
    # for some reason py3.9 wheels are missing.
    # so might have to drop back to 3.8 for everything, unless can change python version
    # somehow depending on os? Thus this would allow 18.04 to have py3.9
    # 
    # As for snaps
    # ----------------------
    # core18 is py36 and it is hard to upgrade python - have a pending
    # question in forums. 
    # If we build using core20 then that might be easier and would give us py38
    # by default.
    # Alternatively, possibly a pyenv based solution could be achieved?

    # Note re linux installs
    # pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython
    # pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04 wxPython

    steps:
    - name: Set env var 3.9
      env:
          PY_VERS: 3.9
      run: echo "we just set env.PY_VERS to ${{ env.PY_VERS }}"
    - name: Set env var 3.9 conditionally
    #   if: "$RUNNER_OS" == "Linux"
    #   env:
    #       PY_VERS: 3.8
    #   run: echo "we just set env.PY_VERS to ${{ env.PY_VERS }}"
      run: echo "PY_VERS is ${{ env.PY_VERS }} aka $PY_VERS"
    - uses: actions/checkout@v2       
    - name: Setup Python please
      uses: actions/setup-python@v2
      with:
        # python-version: 3.9    
        python-version: 3.8 
        # python-version: ${{ env.PY_VERS }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel

        echo "$RUNNER_OS"
        echo "${{ matrix.os }}"
        if [ "$RUNNER_OS" == "Linux" ]; then    # report linux distro version
          lsb_release -a 
        fi
        echo "Ideally using Python $PY_VERS"
        
        if [ "$RUNNER_OS" == "Linux" ]; then
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/${{ matrix.os }} wxPython
          sudo apt-get install libsdl2-mixer-2.0-0 libsdl2-image-2.0-0 libsdl2-2.0-0

        elif [ "$RUNNER_OS" == "macOS" ]; then
          pip install wxpython

        elif [ "$RUNNER_OS" == "Windows" ]; then
            # choco install important_windows_software
            echo "windows - TODO"

        else
            echo "$RUNNER_OS not supported"
            exit 1
        fi

        pip install -r requirements.txt
        pip install pyinstaller

    - name: Report Python version_info
      run: |
        python -c "import sys; print(sys.version_info)"
        uname -a

    - name: Build executable using Pyinstaller
      run: |
        # pyinstaller --windowed -F --noconfirm -i icons/Dakirby309-Simply-Styled-Mac-Front-Row.icns rubber_band_async.py
        pyinstaller rubber_band_async_custom.spec
        ls -l dist/

    # No need to zip it up since Github Actions auto zips artifacts when they are downloaded, and there
    # is no way around that https://github.com/actions/upload-artifact/issues/39 
    # 
    # - name: Zip up dist/
    #   # run: zip -r dist.zip dist/rubber_band_async.app
    #   # run: zip -r dist.zip dist/rubber_band_async
    #   run: zip -r dist-${{ matrix.os }}.zip dist/

    - name: Save generated executable file as an artifact
      uses: actions/upload-artifact@v2
      with:
        # name: rubber-band-${{ matrix.os }}.zip
        name: rubber-band-${{ matrix.os }}
        path: dist/
