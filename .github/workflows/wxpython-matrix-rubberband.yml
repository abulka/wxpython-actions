name: Rubberband wxpython linux and mac 
on:
  push:
    branches: [ main ]
jobs:
  buildfun:
    # runs-on: ubuntu-18.04
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [macos-latest, ubuntu-18.04, windows-latest]
        # os: [macos-latest, ubuntu-18.04, ubuntu-20.04]
        os: [macos-latest]

    # job level env
    env:
      PYTHON_VERSION: 3.9

    steps:

    - name: Downgrade Python to 3.8  # wxPython 3.9 not available on Ubuntu 20.04 yet
      if: matrix.os == 'ubuntu-20.04'
      run: echo "PYTHON_VERSION=3.8" >> $GITHUB_ENV

    - name: Diagnostic report env
      run: |
        echo "PYTHON_VERSION is ${{ env.PYTHON_VERSION }} aka $PYTHON_VERSION"
        echo "$RUNNER_OS"
        echo "${{ matrix.os }}"
        if [ "$RUNNER_OS" == "Linux" ]; then    # report linux distro version
          lsb_release -a 
        fi

    - uses: actions/checkout@v2

    - name: Setup Python please
      uses: actions/setup-python@v2
      with:
        # python-version: 3.9    
        # python-version: 3.8 
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel

        if [ "$RUNNER_OS" == "Linux" ]; then
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/${{ matrix.os }} wxPython
          sudo apt-get install libsdl2-mixer-2.0-0 libsdl2-image-2.0-0 libsdl2-2.0-0

        elif [ "$RUNNER_OS" == "macOS" ]; then
          pip install wxpython

        elif [ "$RUNNER_OS" == "Windows" ]; then
            # choco install important_windows_software
            echo "windows - TODO"

        else
            echo "$RUNNER_OS not supported"
            exit 1
        fi

        pip install -r requirements.txt
        pip install pyinstaller

    - name: Run Python and print version_info
      run: |
        python -c "import sys; print(sys.version_info)"
        uname -a

    - name: Build executable using Pyinstaller
      run: |
        pyinstaller rubber_band_async_custom.spec
        ls -l dist/

    - name: Save generated executable file as an artifact
      uses: actions/upload-artifact@v2
      with:
        # The act of downloading zips up the artifact and adds the .zip to the downloaded file
        name: rubber-band-${{ matrix.os }}
        path: dist/
